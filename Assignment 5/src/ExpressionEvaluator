package eg.edu.alexu.csd.datastructure.stack;
//package eg.edu.alexu.csd.datastructure.stack.<08>;


import java.util.EmptyStackException;

/**
 * ExpressionEvaluator is a class used to deal with postfix notation
 */

public class ExpressionEvaluator implements IExpressionEvaluator {
    /**
     * it is used to turn and infix expression to postfix expression
     * @param expression is an infix expression, all operators, operands and parentheses
     *                   are separate by spaces
     * infix expression
     * @return postfix expression separated by spaces
     * @throws RuntimeException if found anything unusual in the infix expression
     */
    @Override
    public String infixToPostfix(String expression) throws RuntimeException {
        if (validate(expression)){
            DLinkedList list = infixToLinkedListPostfix(expression);
            StringBuilder s = new StringBuilder("");
            while (!list.isEmpty()) {
                s.append(list.get(0));
                list.remove(0);
                if (!list.isEmpty()) {
                    s.append(' ');
                }
            }
            return s.toString();
        }
        throw new RuntimeException("Invalid expression");
    }

    /**
     * converts and infix string expression to a double linked list
     * @param expression is an infix expression, all operators, operands and parentheses
     *      *                   are separate by spaces
     * @return double linked list of a postfix expression
     */
    private DLinkedList infixToLinkedListPostfix(String expression) {
        DLinkedList list = new DLinkedList();
        Stack stack = new Stack();
        for (String string : expression.split(" ")) {
            if (string.length() == 1) {
                char character = string.charAt(0);
                if ((character <= '9' && character >= '0') || (character <= 'z' && character >= 'a') || (character <= 'Z' && character >= 'A')) {
                    list.add(Character.toString(character));
                } else if (precedence(character) > 0 || character == ')' || character == '(') {
                    if (!stack.isEmpty()) {
                        if ((precedence(character) > precedence((Character) stack.peek())) || (stack.contains('('))) {
                            stack.push(character);
                        } else if (precedence(character) > 0) {
                            while (!stack.isEmpty() && (precedence((Character) stack.peek()) >= precedence(character))) {
                                if (precedence(character) == -1) break;
                                list.add(stack.pop().toString());
                            }
                            stack.push(character);
                        } else if (character == '(') {
                            stack.push(character);
                        } else if (character == ')') {
                            while (precedence((Character) stack.peek()) > 0) {
                                list.add(stack.pop().toString());
                            }
                            if (stack.peek().equals('(')) {
                                stack.pop();
                            }
                        }
                    } else {
                        stack.push(character);
                    }
                }
            } else {
                int value;
                try {
                    value = Integer.parseInt(string);
                    list.add(Integer.toString(value));
                } catch (NumberFormatException e){
                    throw new RuntimeException("can't have " + string+ " in the expression");
                }
            }
        }
        while (!stack.isEmpty()) {
            list.add(stack.pop());
        }
        return list;
    }

    /**
     * gets the precedence of operators
     * @param c character type represents operators
     * @return the integer value of precedence
     */
    private int precedence(char c) {
        switch (c) {
            case '+':
                return 1;
            case '-':
                return 2;
            case '*':
                return 4;
            case '/':
                return 3;
            default:
                return -1;

        }
    }

    /**
     * validates an infix expression
     * @param expression is an infix expression, all operators, operands and parentheses
     *                 are separate by spaces
     * @return if valid returns true, else returns false
     */
    private boolean validate(String expression) {
        int leftPar = 0;
        int rightPar = 0;
        int operands = 0;
        int operators = 0;
        boolean junk = false;

        for (String string : expression.split(" ")) {
            if (string.equals("(")){
                leftPar++;
            } else if (string.equals(")")){
                rightPar++;
            } else if (string.length() == 1 && ((string.charAt(0) <= 'z' && string.charAt(0) >= 'a'))
                    || (string.charAt(0) <= 'Z' && string.charAt(0) >= 'A')){
                operands++;

            } else if (string.equals("+") || string.equals("-") || string.equals("/") || string.equals("*")) {
                operators++;
            } else if (string.equals(" ")){
                continue;
            } else {
                try{
                    Integer.parseInt(string);
                    operands++;
                } catch (NumberFormatException e){
                    junk =true;
                }
            }
        }
        if (leftPar == rightPar
                && operands == operators + 1
                && !junk) return true;
        return false;
    }

    /**
     * calculates the value of the expression
     * @param expression a postfix expression separated by single space
     *  postfix expression
     * @return the value of the expression rounded
     */
    @Override
    public int evaluate(String expression) {  // sorry but i had to put some constrains, the expression should
        String[] exp = expression.split(" ");           // have spaces between everything in it
        Stack stack = new Stack();
        for (String string : exp) {
            try {
                stack.push(Double.parseDouble(string));
            } catch (NumberFormatException e) {
                try{
                    double value = result(string, (Double) stack.pop(), (Double) stack.pop());
                    if (value == Double.MAX_VALUE) {
                        throw new RuntimeException("can't evaluate the expression"); // problem found
                    }
                    stack.push(value);
                } catch (EmptyStackException i){
                    throw new RuntimeException("can't evaluate the expression");
                }
            }
        }
        if (stack.size() > 1) throw new RuntimeException("can't evaluate the expression"); // problem found
        return (int) Math.round((Double) stack.pop());
    }

    /**
     * this one is self-explanatory
     * @param operator
     * @param secondOperand
     * @param firstOperand
     * @return value of expression
     */
    private double result(String operator, double secondOperand, double firstOperand) {
        switch (operator) {
            case "+":
                return firstOperand + secondOperand;
            case "-":
                return firstOperand - secondOperand;
            case "/":
                if (secondOperand == 0) {
                    return Double.MAX_VALUE;
                }
                return firstOperand / secondOperand;
            case "*":
                return firstOperand * secondOperand;
            default:
                return Double.MAX_VALUE;
        }
    }
}
