package eg.edu.alexu.csd.datastructure.linkedList;

import java.util.HashSet;

public class PolynomialSolver implements IPolynomialSolver {
    private DLinkedList list = new DLinkedList();
    private Polynomial ans = new Polynomial('R', null);

    @Override
    public void setPolynomial(char poly, int[][] terms) {
        boolean found = false;
        if (!list.isEmpty()) {
            list.setCursor(0);
            if (((Polynomial) list.getCurrent()).getName() == poly) {
                ((Polynomial) list.getCurrent()).setTerms(terms);
                found = true;
            } else {
                while (list.hasNext()) {
                    if (((Polynomial) list.getNext()).getName() == poly) {
                        ((Polynomial) list.getCurrent()).setTerms(terms);
                        found = true;
                    }
                }
            }

        }
        if (list.isEmpty() || !found) {
            list.add(new Polynomial(poly, terms));
        }
    } // done and tested

    @Override
    public String print(char poly) {
        if (list.isEmpty()) return "No Polynomial found";
        Polynomial polynomial = getPolynomial(poly);
        if (polynomial == null) return null;
        return polynomial.toString();
    }  // done and tested

    private Polynomial getPolynomial(char poly) {
        if (list.isEmpty()) return null;
        list.setCursor(0);
        if (((Polynomial) list.getCurrent()).getName() == poly) {
            return (Polynomial) list.getCurrent();
        }
        while (list.hasNext()) {
            if (((Polynomial) list.getNext()).getName() == poly) {
                return (Polynomial) list.getCurrent();
            }
        }
        return null;
    }  // done and tested

    @Override
    public void clearPolynomial(char poly) {
        if (list.isEmpty()) return;
        list.setCursor(0);
        if (((Polynomial) list.getCurrent()).getName() == poly) {
            list.removeCurrent();
        } else {
            while (list.hasNext()) {
                if (((Polynomial) list.getNext()).getName() == poly) {
                    list.removeCurrent();
                    break;
                }
            }
        }
    } // done and tested

    @Override
    public float evaluatePolynomial(char poly, float value) {
        Polynomial polynomial = getPolynomial(poly);
        if (polynomial == null) return Float.MAX_VALUE;
        int[][] arr = polynomial.getTerms();
        float sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += ((float) arr[i][0] * (float) Math.pow((double) value, (double) arr[i][1]));
        }
        return sum;
    } // done and tested

    private int[][] theEndOfWar(char poly1, char poly2, int sign) {
        Polynomial var1 = null;
        Polynomial var2 = null;
        Polynomial temp;
        for (int i = 0; i < list.size(); i++) {
            temp = (Polynomial) list.get(i);
            if (temp.name == poly1) {
                var1 = temp;
            }
            if (temp.name == poly2) {
                var2 = temp;
            }
        }
        if (var1 == null || var2 == null)
            return null;

        HashSet con = new HashSet();
        DLinkedList death = new DLinkedList();
        DLinkedList warPower = new DLinkedList();
        for (int i = 0; i < var1.terms.length; i++) {
            boolean found = false;
            int die = 0;
            for (int j = 0; j < var1.terms.length; j++) {
                if (var1.terms[i][1] == var2.terms[j][1]) {
                    found = true;
                    die = j;
                    break;
                }
            }
            if (found) {
                con.add(var1.terms[i][1]);
                int fire = 1;
                if (sign == 2)
                    fire = -1;
                death.add(var1.terms[i][0] + fire * (var2.terms[die][0]));
                if ((int) death.get(death.size() - 1) == 0) {
                    death.remove(death.size() - 1);
                } else {
                    warPower.add(var1.terms[i][1]);
                }
            }
        }

        for (int i = 0; i < var1.terms.length; i++) {
            if (!con.contains(var1.terms[i][1])) {
                death.add(var1.terms[i][0]);
                warPower.add(var1.terms[i][1]);
            }
        }
        int fire = 1;
        if (sign == 2)
            fire = -1;
        for (int j = 0; j < var2.terms.length; j++) {
            if (!con.contains(var2.terms[j][1])) {
                death.add(fire * var2.terms[j][0]);
                warPower.add(var2.terms[j][1]);
            }
        }
        int[][] ans = new int[death.size()][2];
        for (int i = 0; i < ans.length; i++) {
            ans[i][0] = (int) death.get(i);
            ans[i][1] = (int) warPower.get(i);
        }

        for (int i = 0; i < death.size(); i++) {
            if ((int) death.get(i) == 0) {
                death.remove(i);
                warPower.remove(i);
                i--;
            }
        }

        int p = 0;
        int c = 0;
        for (int i = 0; i < ans.length; i++) {
            for (int j = 0; j < ans.length - i - 1; j++) {
                if (ans[j][1] < ans[j + 1][1]) {
                    p = ans[j][1];
                    c = ans[j][0];
                    ans[j][1] = ans[j + 1][1];
                    ans[j][0] = ans[j + 1][0];
                    ans[j + 1][1] = p;
                    ans[j + 1][0] = c;
                }
            }
        }

        if (ans.length == 0) {
            int[][] ansh = new int[1][2];
            ansh[0][0] = 0;
            ansh[0][1] = 0;
            setPolynomial('R', ansh);
            return ansh;
        }
        setPolynomial('R', ans);

        return ans;
    }


    @Override
    public int[][] add(char poly1, char poly2) {
        this.theEndOfWar(poly1, poly2, 1);// 1 for add two for substraction

        return this.theEndOfWar(poly1, poly2, 1);// 1 for add two for substraction
    }

    @Override
    public int[][] subtract(char poly1, char poly2) {
        return this.theEndOfWar(poly1, poly2, 2);// 1 for add two for substraction
    }

    @Override
    public int[][] multiply(char poly1, char poly2) {
        Polynomial var1 = null;
        Polynomial var2 = null;
        Polynomial temp;
        for (int i = 0; i < list.size(); i++) {
            temp = (Polynomial) list.get(i);
            if (temp.name == poly1) {
                var1 = temp;
            }
            if (temp.name == poly2) {
                var2 = temp;
            }
        }
        if (var1 == null || var2 == null)
            return null;
        int p1 = 0;
        int c1 = 0;

        DLinkedList death = new DLinkedList();
        DLinkedList warPower = new DLinkedList();

        for (int i = 0; i < var1.terms.length; i++) {
            for (int j = 0; j < var2.terms.length; j++) {
                p1 = var1.terms[i][1] + var2.terms[j][1];
                c1 = var1.terms[i][0] * var2.terms[j][0];
                boolean found = false;
                for (int k = 0; k < warPower.size(); k++) {
                    if (p1 == (int) warPower.get(k)) {
                        death.set(k, (int) death.get(k) + c1);
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    death.add(c1);
                    warPower.add(p1);
                }
            }
        }


        for (int i = 0; i < death.size(); i++) {
            if ((int) death.get(i) == 0) {
                death.remove(i);
                warPower.remove(i);
                i--;
            }
        }

        int[][] ans = new int[death.size()][2];
        for (int i = 0; i < ans.length; i++) {
            ans[i][0] = (int) death.get(i);
            ans[i][1] = (int) warPower.get(i);
        }
        int p = 0;
        int c = 0;
        for (int i = 0; i < ans.length; i++) {
            for (int j = 0; j < ans.length - i - 1; j++) {
                if (ans[j][1] < ans[j + 1][1]) {
                    p = ans[j][1];
                    c = ans[j][0];
                    ans[j][1] = ans[j + 1][1];
                    ans[j][0] = ans[j + 1][0];
                    ans[j + 1][1] = p;
                    ans[j + 1][0] = c;
                }
            }
        }
        if (ans.length == 0) {
            int[][] ansh = new int[1][2];
            ansh[0][0] = 0;
            ansh[0][1] = 0;
            setPolynomial('R', ansh);

            return ansh;
        }
        setPolynomial('R', ans);
        return ans;
    }

    @Override
    public String toString() {
        if (list.isEmpty()) return "No Polynomials found";
        StringBuilder s = new StringBuilder("");
        list.setCursor(0);
        s.append(list.getCurrent()).append('\n');
        while (list.hasNext()) {
            s.append(list.getNext()).append('\n');

        }
        return s.toString();
    } // done and tested

    public Polynomial getAns() {
        return ans;
    }

    private class Polynomial {
        private final char name;
        private int[][] terms;

        public Polynomial(char name, int[][] terms) {
            this.name = name;
            this.terms = terms;
        }

        public char getName() {
            return name;
        }

        public int[][] getTerms() {
            return terms;
        }

        public void setTerms(int[][] terms) {
            this.terms = terms;
        }

        @Override
        public boolean equals(Object obj) {
            Polynomial polynomial = (Polynomial) obj;
            if (this.getTerms().length != polynomial.getTerms().length) return false;
            for (int i = 0; i < polynomial.getTerms().length; i++) {
                if (this.getTerms()[i].length != polynomial.getTerms()[i].length) return false;
                for (int j = 0; j < polynomial.getTerms()[i].length; j++) {
                    if (polynomial.getTerms()[i][j] != this.getTerms()[i][j]) return false;
                }
            }
            return this.getName() == polynomial.getName();
        }

        @Override
        public String toString() {
            StringBuilder s = new StringBuilder(this.name + ": ");
            for (int i = 0; i < this.terms.length; i++) {
                if (terms[i][0] != 0) {  // total
                    if (terms[i][1] == 0) { // absolute value
                        if (i == 0) { // first term
                            s.append(terms[i][0]);
                        } else { // not first term
                            if (terms[i][0] < 0) s.append("- ").append(Math.abs(terms[i][0]));
                            else if (terms[i][0] > 0) s.append("+ ").append(terms[i][0]);
                        }
                        continue;
                    }
                    if (i == 0) { // first term
                        if (terms[i][0] != 1) s.append(terms[i][0]);
                        s.append('X').append('^').append(terms[i][1]);
                    } else {
                        if (terms[i][0] > 0) { //+ ve coefficient meddle term
                            s.append("+ ");
                            if (terms[i][0] != 1) s.append(terms[i][0]);
                            s.append('X').append('^').append(terms[i][1]);
                        } else { // -ve coefficient meddle term
                            s.append("- ");
                            if (terms[i][0] != -1) s.append(Math.abs(terms[i][0]));
                            s.append('X').append('^').append(terms[i][1]);
                        }
                    }
                    s.append(' ');
                }
            }
            return s.toString();
        } // done and tested
    }  // done and tested
}
